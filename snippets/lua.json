{
  "require": {
    "prefix": "req",
    "body": ["require(${1:module})"],
    "description": "Require module"
  },
  "return": {
    "prefix": "rt",
    "body": ["return $0"],
    "description": "Return value"
  },
  "assigment": {
    "prefix": "ll",
    "body": ["local ${1:varName} = ${0:value}"],
    "description": "Define a variable"
  },
  "locreq": {
    "prefix": "lreq",
    "body": ["local ${1:module} = require(\"${2:$1}\")$0"],
    "description": "Require module as a variable"
  },
  "if": {
    "prefix": "if",
    "body": ["if ${1:true} then", "\t$0", "end"]
  },
  "elseif": {
    "prefix": "elseif",
    "body": ["elseif ${1:true} then", "\t$0"]
  },
  "for": {
    "prefix": "for",
    "body": ["for $1 do", "\t$0", "end"],
    "description": "for statement"
  },
  "for-numeric": {
    "prefix": "forn",
    "body": ["for ${1:i} = ${2:1}, ${3:10} do", "\t$0", "end"],
    "description": "for numeric range statement"
  },
  "for-ipairs": {
    "prefix": "fori",
    "body": ["for ${1:i}, ${2:x} in ipairs(${3:t}) do", "\t$0", "end"],
    "description": "for i, x in ipairs(t)"
  },
  "function": {
    "prefix": "fu",
    "body": ["function ${1:name}($2)", "\t${0}", "end"],
    "description": "Define a function"
  },
  "assign-function": {
    "prefix": "f=",
    "body": ["${1:name} = function($2)", "\t${0}", "end"],
    "description": "Assign a function to a variable"
  },
  "local-function": {
    "prefix": "lfu",
    "body": ["local function ${1:name}($2)", "\t${0}", "end"],
    "description": "Define a local function"
  },
  "self": {
    "prefix": "self:",
    "body": ["function self:${1:methodName}($2)", "\t$0", "end"]
  },
  "while": {
    "prefix": "while",
    "body": ["while ${1:true} do", "\t$0", "end"]
  },
  "pcall": {
    "prefix": "pca",
    "body": ["pcall(${1:function})"],
    "description": "Protect call a function"
  },
  "locpcall": {
    "prefix": "lpca",
    "body": ["local ${1:status}, ${2:err_or_value} = pcall(${3:function})"],
    "description": "Protect call a function as a variable"
  }
}
